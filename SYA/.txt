using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace SYA
{
    public partial class Search : Form
    {
        private SQLiteConnection connectionToSYADatabase;

        public Search()
        {
            InitializeComponent();
            InitializeDatabaseConnection();
        }

        private void Search_Load(object sender, EventArgs e)
        {
            string query = "SELECT * FROM MAIN_DATA";
            LoadDataFromSQLite(query);
        }
        private void InitializeDatabaseConnection()
        {
            connectionToSYADatabase = new SQLiteConnection("Data Source=C:\\Users\\pvraj\\OneDrive\\Desktop\\SYA\\SYADataBase.db;Version=3;");
            // connectionToDatacare = new SQLiteConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\"C:\\Users\\pvraj\\OneDrive\\Desktop\\DataCare23 - Copy.mdb\";");

        }


        private void LoadDataFromSQLite(String query)
        {
            try
            {
                using (SQLiteConnection sqliteConnection = new SQLiteConnection(connectionToSYADatabase))
                {
                    sqliteConnection.Open();

                    // SELECT query to retrieve data from MAIN_DATA


                    using (SQLiteCommand command = new SQLiteCommand(query, sqliteConnection))
                    {
                        using (SQLiteDataReader reader = command.ExecuteReader())
                        {
                            // Clear existing rows in the DataGridView
                            dataGridViewSearch.Rows.Clear();

                            // Iterate through the result set and populate the DataGridView
                            while (reader.Read())
                            {
                                // Add a new row to the DataGridView
                                int rowIndex = dataGridViewSearch.Rows.Add();

                                // Set values for each column in the DataGridView
                                dataGridViewSearch.Rows[rowIndex].Cells["tagno"].Value = reader["TAG_NO"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["vchno"].Value = reader["VCH_NO"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["vchdate"].Value = reader["VCH_DATE"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["itemdesc"].Value = reader["ITEM_PURITY"].ToString() + "  -  " + reader["ITEM_DESC"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["gross"].Value = reader["GW"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["net"].Value = reader["NW"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["huid1"].Value = reader["HUID1"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["huid2"].Value = reader["HUID2"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["labour"].Value = reader["LABOUR_AMT"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["wholeLabour"].Value = reader["WHOLE_LABOUR_AMT"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["other"].Value = reader["OTHER_AMT"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["size"].Value = reader["size"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["price"].Value = reader["price"].ToString();
                                dataGridViewSearch.Rows[rowIndex].Cells["comment"].Value = reader["COMMENT"].ToString();

                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading data from SQLite: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnSearchSave_Click(object sender, EventArgs e)
        {
            SaveDataToSQLite();

        }
        private void SaveDataToSQLite()
        {
            string tagNo = string.Empty;
            string gross = string.Empty;
            string net = string.Empty;
            string labour = string.Empty;
            string wholeLabour = string.Empty;
            string other = string.Empty;
            string huid1 = string.Empty;
            string huid2 = string.Empty;
            string size = string.Empty;
            string price = string.Empty;
            string comment = string.Empty;

            try
            {
                using (SQLiteConnection sqliteConnection = new SQLiteConnection(connectionToSYADatabase))
                {
                    sqliteConnection.Open();

                    foreach (DataGridViewRow row in dataGridViewSearch.Rows)
                    {
                        tagNo = row.Cells["tagno"].Value?.ToString() ?? string.Empty;
                        gross = row.Cells["gross"].Value?.ToString() ?? "0";  // Default value for numeric types
                        net = row.Cells["net"].Value?.ToString() ?? "0";      // Default value for numeric types
                        labour = row.Cells["labour"].Value?.ToString() ?? "0";  // Default value for numeric types
                        wholeLabour = row.Cells["wholeLabour"].Value?.ToString() ?? "0";  // Default value for numeric types
                        other = row.Cells["other"].Value?.ToString() ?? "0";  // Default value for numeric types
                        huid1 = row.Cells["huid1"].Value?.ToString()?.ToUpper() ?? string.Empty;
                        huid2 = row.Cells["huid2"].Value?.ToString()?.ToUpper() ?? string.Empty;
                        size = row.Cells["size"].Value?.ToString() ?? string.Empty;
                        price = row.Cells["price"].Value?.ToString() ?? "0";  // Default value for numeric types
                        comment = row.Cells["comment"].Value?.ToString() ?? string.Empty;

                        // Validate HUID1 and HUID2
                        if ((!string.IsNullOrWhiteSpace(huid1) && huid1.Length != 6) || (!string.IsNullOrWhiteSpace(huid2) && huid2.Length != 6))
                        {
                            MessageBox.Show("HUID length must be 6 characters if not null.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return; // Exit the method if validation fails
                        }

                        // Validate if HUID1 is null and HUID2 is not null
                        if (string.IsNullOrWhiteSpace(huid1) && !string.IsNullOrWhiteSpace(huid2))
                        {
                            MessageBox.Show("Please insert HUID1 at the correct place.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return; // Exit the method if validation fails
                        }

                        // Construct the UPDATE query
                        string updateQuery = $"UPDATE MAIN_DATA SET HUID1 = '{huid1}', HUID2 = '{huid2}', COMMENT = '{comment}',LABOUR_AMT = '{labour}',OTHER_AMT = '{other}',WHOLE_LABOUR_AMT = '{wholeLabour}', GW = '{gross}',NW = '{net}',SIZE = '{size}',PRICE = '{price}'  WHERE TAG_NO = '{tagNo}'";

                        using (SQLiteCommand updateCommand = new SQLiteCommand(updateQuery, sqliteConnection))
                        {
                            updateCommand.ExecuteNonQuery();
                        }
                    }

                    MessageBox.Show("Data saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error saving data to SQLite. " +
        $"TagNo: {tagNo}, Gross: {gross}, Net: {net}, " +
        $"Labour: {labour}, WholeLabour: {wholeLabour}, " +
        $"Other: {other}, HUID1: {huid1}, HUID2: {huid2}, " +
        $"Size: {size}, Price: {price}, Comment: {comment}. " +
        $"Error: {ex.Message} \n\nStackTrace: {ex.StackTrace}",
        "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                MessageBox.Show($"Error saving data to SQLite. TagNo: {tagNo}, Gross: {gross}, Net: {net}, Labour: {labour}, WholeLabour: {wholeLabour}, Other: {other}, HUID1: {huid1}, HUID2: {huid2}, Size: {size}, Price: {price}, Comment: {comment}. Error: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        private void btnSearchSelectAll_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < dataGridViewSearch.Rows.Count; i++)
            {
                dataGridViewSearch.Rows[i].Cells["select"].Value = true;
            }
        }
        // Value change in text boxes
        private void txtTagno_TextChanged(object sender, EventArgs e)
        {
            string query = $"SELECT * FROM MAIN_DATA WHERE TAG_NO LIKE '%{txtTagno.Text}%'";
            LoadDataFromSQLite(query);
        }

        private void txtWeight_TextChanged(object sender, EventArgs e)
        {
            string query = $"SELECT * FROM MAIN_DATA WHERE GW LIKE '%{txtWeight.Text}%' OR NW LIKE '%{txtWeight.Text}%'";
            LoadDataFromSQLite(query);
        }

        private void txtBillNo_TextChanged(object sender, EventArgs e)
        {
            string query = $"SELECT * FROM MAIN_DATA WHERE VCH_NO LIKE '%{txtBillNo}%'";
            LoadDataFromSQLite(query);
        }

        private void txtHUID_TextChanged(object sender, EventArgs e)
        {
            string query = $"SELECT * FROM MAIN_DATA WHERE HUID1 LIKE '%{txtHUID.Text}%' OR HUID2 LIKE '%{txtHUID.Text}%'";
            LoadDataFromSQLite(query);
        }

        private void txtSearchAnything_TextChanged(object sender, EventArgs e)
        {
            string searchValue = txtSearchAnything.Text;
            string query = $"SELECT * FROM MAIN_DATA WHERE " +
                    $"TAG_NO LIKE '%{searchValue}%' OR " +
                    $"VCH_NO LIKE '%{searchValue}%' OR " +
                    $"ITEM_PURITY LIKE '%{searchValue}%' OR " +
                    $"ITEM_DESC LIKE '%{searchValue}%' OR " +
                    $"COMMENT LIKE '%{searchValue}%' OR " +
                    $"CO_YEAR LIKE '%{searchValue}%' OR " +
                    $"CO_BOOK LIKE '%{searchValue}%' OR " +
                    $"VCH_DATE LIKE '%{searchValue}%' OR " +
                    $"GW LIKE '%{searchValue}%' OR " +
                    $"NW LIKE '%{searchValue}%' OR " +
                    $"LABOUR_AMT LIKE '%{searchValue}%' OR " +
                    $"WHOLE_LABOUR_AMT LIKE '%{searchValue}%' OR " +
                    $"OTHER_AMT LIKE '%{searchValue}%' OR " +
                    $"IT_TYPE LIKE '%{searchValue}%' OR " +
                    $"ITEM_CODE LIKE '%{searchValue}%' OR " +
                    $"HUID1 LIKE '%{searchValue}%' OR " +
                    $"HUID2 LIKE '%{searchValue}%' OR " +
                    $"SIZE LIKE '%{searchValue}%' OR " +
                    $"PRICE LIKE '%{searchValue}%' OR " +
                    $"STATUS LIKE '%{searchValue}%' OR " +
                    $"AC_CODE LIKE '%{searchValue}%' OR " +
                    $"AC_NAME LIKE '%{searchValue}%'";
            LoadDataFromSQLite(query);
        }
    }
}
