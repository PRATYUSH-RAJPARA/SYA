private void retrive_Click(object sender, EventArgs e)
        {
            using (SQLiteCommand cmd = new SQLiteCommand("SELECT * FROM Account", connection))
            {
                connection.Open();
                using (SQLiteDataReader reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        // Access data using reader["column_name"]
                        string username = reader["username"].ToString();
                        string password = reader["password"].ToString();
                        // Do something with the data, e.g., display it in a MessageBox
                        MessageBox.Show($"Username: {username}, Password: {password}");
                    }
                }
                connection.Close();
            }
        }



        using System;
using System.Data;
using System.Data.SQLite;
using System.Windows.Forms;

namespace YourNamespace
{
    public partial class YourForm : Form
    {
        // Replace these with your actual column indices
        private const int ItemCodeColumnIndex = 10; // Assuming ITEM_CODE is at index 10
        private const int TagNoColumnIndex = 5; // Assuming TAG_NO is at index 5

        private SQLiteConnection connection;
        private SQLiteDataAdapter dataAdapter;
        private DataSet dataSet;

        public YourForm()
        {
            InitializeComponent();

            // Initialize your SQLite connection and adapter
            connection = new SQLiteConnection("your_connection_string_here");
            dataAdapter = new SQLiteDataAdapter("SELECT * FROM YourTableName", connection);
            dataSet = new DataSet();

            // Load data into the DataGridView
            dataAdapter.Fill(dataSet, "YourTableName");
            dataGridView1.DataSource = dataSet.Tables["YourTableName"];

            // Subscribe to the CellValueChanged event
            dataGridView1.CellValueChanged += DataGridView1_CellValueChanged;
        }

        private void DataGridView1_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == ItemCodeColumnIndex)
            {
                UpdateTagNo(e.RowIndex);
            }
        }

        private void UpdateTagNo(int rowIndex)
        {
            string itemCode = dataGridView1.Rows[rowIndex].Cells[ItemCodeColumnIndex].Value.ToString();
            int newSequenceNumber = GetNextSequenceNumber(itemCode);

            string newTagNo = $"{itemCode}{newSequenceNumber:D5}";

            // Update TAG_NO in DataGridView
            dataGridView1.Rows[rowIndex].Cells[TagNoColumnIndex].Value = newTagNo;

            // Update TAG_NO in the database (execute your SQL UPDATE statement here)
            // For simplicity, assuming a single table named YourTableName with columns ID, ITEM_CODE, TAG_NO
            using (SQLiteCommand updateCommand = new SQLiteCommand("UPDATE YourTableName SET TAG_NO = @tagNo WHERE ID = @id", connection))
            {
                updateCommand.Parameters.AddWithValue("@tagNo", newTagNo);
                updateCommand.Parameters.AddWithValue("@id", dataGridView1.Rows[rowIndex].Cells[0].Value); // Assuming ID is at index 0

                connection.Open();
                updateCommand.ExecuteNonQuery();
                connection.Close();
            }
        }

        private int GetNextSequenceNumber(string itemCode)
        {
            using (SQLiteCommand command = new SQLiteCommand($"SELECT MAX(SUBSTR(TAG_NO, LENGTH('{itemCode}') + 1)) FROM YourTableName WHERE ITEM_CODE = '{itemCode}'", connection))
            {
                connection.Open();
                object result = command.ExecuteScalar();
                connection.Close();

                if (result != DBNull.Value)
                {
                    return Convert.ToInt32(result) + 1;
                }

                return 1;
            }
        }
    }
}
 = new SQLiteConnection("Data Source=C:\\Users\\pvraj\\OneDrive\\Desktop\\SYA\\SYADataBase.db;Version=3;");


         private void SaveDataworking()
        {
            // Check if there are rows in the DataGridView
            if (dataGridView1.Rows.Count == 0)
            {
                MessageBox.Show("DataGridView is empty. Check your data population logic.");
                return;
            }
            // Call the ValidateData function
            if (!ValidateData())
            {
                // Validation failed, return or handle accordingly
                return;
            }

            using (SQLiteConnection con = new SQLiteConnection(connection.ConnectionString))
            {
                con.Open();

                using (SQLiteCommand insertCommand = new SQLiteCommand("INSERT INTO MAIN_DATA ( TAG_NO, ITEM_DESC, ITEM_PURITY, GW, NW, LABOUR_AMT, OTHER_AMT, HUID1, HUID2, SIZE, COMMENT, ITEM_CODE, CO_YEAR, CO_BOOK, VCH_NO, VCH_DATE, PRICE, STATUS, AC_CODE, AC_NAME) VALUES ( @tagNo, @type, @caret, @gross, @net, @labour, @other, @huid1, @huid2, @size, @comment, @prCode, @coYear, @coBook, @vchNo, @vchDate, @price, @status, @acCode, @acName)", con))
                {
                    foreach (DataGridViewRow row in dataGridView1.Rows)
                    {
                        // Call UpdateTagNo for each row
                        UpdateTagNo(row.Index);

                        // Check if the row is not empty and the "tagno" cell is not null or empty
                        if (!row.IsNewRow && row.Cells["tagno"].Value != null && !string.IsNullOrEmpty(row.Cells["tagno"].Value.ToString()))
                        {
                            // Rest of the code remains the same...
                            string tagNo = row.Cells["tagno"].Value?.ToString();
                            string type = row.Cells["type"].Value?.ToString();
                            string caret = row.Cells["caret"].Value?.ToString();
                            decimal gross = Convert.IsDBNull(row.Cells["gross"].Value) ? 0 : Convert.ToDecimal(row.Cells["gross"].Value);
                            decimal net = Convert.IsDBNull(row.Cells["net"].Value) ? 0 : Convert.ToDecimal(row.Cells["net"].Value);
                            decimal labour = Convert.IsDBNull(row.Cells["labour"].Value) ? 0 : Convert.ToDecimal(row.Cells["labour"].Value);
                            decimal other = Convert.IsDBNull(row.Cells["other"].Value) ? 0 : Convert.ToDecimal(row.Cells["other"].Value);
                            string huid1 = row.Cells["huid1"].Value?.ToString();
                            string huid2 = row.Cells["huid2"].Value?.ToString();
                            string size = row.Cells["size"].Value?.ToString();
                            string comment = row.Cells["comment"].Value?.ToString();
                            string prCode = row.Cells["prcode"].Value?.ToString();

                            // Add the fixed data
                            string coYear = "2023-2024";
                            string coBook = "015";
                            string vchNo = "00000";
                            DateTime vchDate = DateTime.Now; // Current date and time
                            decimal price = 0;
                            string status = "INSTOCK";
                            string acCode = null; // Blank
                            string acName = null; // Blank

                            // Insert new data into the database
                            insertCommand.Parameters.AddWithValue("@tagNo", tagNo);
                            insertCommand.Parameters.AddWithValue("@type", type);
                            insertCommand.Parameters.AddWithValue("@caret", caret);
                            insertCommand.Parameters.AddWithValue("@gross", gross);
                            insertCommand.Parameters.AddWithValue("@net", net);
                            insertCommand.Parameters.AddWithValue("@labour", labour);
                            insertCommand.Parameters.AddWithValue("@other", other);
                            insertCommand.Parameters.AddWithValue("@huid1", huid1);
                            insertCommand.Parameters.AddWithValue("@huid2", huid2);
                            insertCommand.Parameters.AddWithValue("@size", size);
                            insertCommand.Parameters.AddWithValue("@comment", comment);
                            insertCommand.Parameters.AddWithValue("@prCode", prCode);

                            // Add parameters for fixed data
                            insertCommand.Parameters.AddWithValue("@coYear", coYear);
                            insertCommand.Parameters.AddWithValue("@coBook", coBook);
                            insertCommand.Parameters.AddWithValue("@vchNo", vchNo);
                            insertCommand.Parameters.AddWithValue("@vchDate", vchDate);
                            insertCommand.Parameters.AddWithValue("@price", price);
                            insertCommand.Parameters.AddWithValue("@status", status);
                            insertCommand.Parameters.AddWithValue("@acCode", acCode);
                            insertCommand.Parameters.AddWithValue("@acName", acName);

                            string executedQuery = insertCommand.CommandText;
                            string parameterValues = string.Join(", ", insertCommand.Parameters.Cast<SQLiteParameter>().Select(p => $"{p.ParameterName} = {p.Value}"));
                            Log.Information("Executed Query: {ExecutedQuery}, Parameters: {ParameterValues}", executedQuery, parameterValues);


                            insertCommand.ExecuteNonQuery();
                            insertCommand.Parameters.Clear();
                        }
                    }
                }
            }
        }
